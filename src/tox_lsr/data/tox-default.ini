# SPDX-License-Identifier: MIT
# some explanation about the environments:
# py26-py38 - python version - we want to parameterize
# on python version because unit testing python code might
# be very different on python 2.7 vs. python 3.8 - at the
# very least we need to test on py 2 and py 3 to catch any
# porting issues - if/when py 2 support is dropped, it will
# still be worthwhile to test with at least the oldest
# supported py 3 vs. latest supported py 3
# ans28-ans210 - ansible version - we want coverage of
# module code with all supported versions of ansible with
# all supported versions of python - but for ansible lint
# testing, we don't care about python version, just use the
# default/basepython
# We have separate ansible-py-pytest and py-pytest because some
# roles want to do some pytest unit testing without ansible,
# and some with ansible, and do not want to have ansible installed
# uselessly if just doing py-pytest testing - same with flake8 -
# don't need ansible for flake8
[tox]
toxworkdir = .tox-lsr
envlist = {py26,py27,py36,py37,py38}-{pylint,flake8,pytest}
    {ans28,ans29,ans210}-{py26,py27,py36,py37,py38}-pytest
    {ans28,ans29,ans210}-molecule
    black, yamllint, shellcheck, ansible-lint, coveralls
    custom
skipsdist = true
skip_missing_interpreters = true
ignore_basepython_conflict = true

[testenv]
passenv = *
basepython = python3
# List common dependencies for Python interpreters here:
setenv =
    PYTHONPATH = {toxinidir}/library:{toxinidir}/module_utils
    SRC_MODULE_UTILS_DIR = {envsitepackagesdir}/ansible/module_utils
    DEST_MODULE_UTILS_DIR = {toxinidir}/module_utils
    TOXINIDIR = {toxinidir}
deps =
    pytest: -rpytest_requirements.txt
    {ans28,ans29,ans210}: -ransible_requirements.txt
    ans28: ansible==2.8.*
    ans28: jinja2==2.7.*
    ans29: ansible==2.9.*
    ans210: ansible=2.10.*
    black: black
    flake8: flake8
    pylint: colorama
    pylint: pylint>=1.8.4
    ansible-lint: ansible-lint==4.3.5
    coveralls: coveralls
    molecule: molecule==3.*
    molecule: docker
    molecule: selinux
    molecule: wcwidth==0.1.9;python_version=="3.6"
    collection: ruamel.yaml
    collection: ansible
    collection: jmespath
whitelist_externals =
    bash
# NOTE WELL: Line wrapping with backslash does not work with commands if you use
# the form envname: command to run - all commands must be on the same line
# that is, this will not work:
#   pytest: bash something ... \
#           some other args
# tox thinks that some other args is a new command and will error
# this means that if you need a {varsubst} you'll need to add it to
# the setenv as VARSUBST = {varsubst} and use $VARSUBST in the script
commands =
    black: bash {tox_lsr_scriptdir}/runblack.sh --check --diff {posargs} .
    pytest: bash {tox_lsr_scriptdir}/runpytest.sh {toxinidir}/tests {posargs} unit
    flake8: bash {tox_lsr_scriptdir}/runflake8.sh {posargs} .
    pylint: bash {tox_lsr_scriptdir}/runpylint.sh --errors-only {posargs}
    ansible-lint: ansible-lint -v --exclude=tests/roles
    coveralls: bash {tox_lsr_scriptdir}/runcoveralls.sh {posargs}
    molecule: molecule test --all {posargs}
    custom: bash -c 'test -f .travis/custom.sh && bash .travis/custom.sh'
    collection: bash {tox_lsr_scriptdir}/runcollection.sh {toxworkdir} master

[pytest]
addopts = -rxs

[pylint]
max-line-length = 88
disable = wrong-import-position

[pycodestyle]
max-line-length = 88

[flake8]
show_source = true
max-line-length = 88
ignore = E402,W503,E501
exclude = .venv,.tox
statistics = true
#verbose = 3

[travis]
python =
  2.6: py26,coveralls,custom
  2.7: py27,coveralls,flake8,pylint,custom
  3.6: py36,coveralls,black,yamllint,shellcheck,custom
  3.7: py37,coveralls,custom
  3.8: py38,coveralls,custom
  3.8-dev: py38,coveralls,custom
